// <auto-generated />
using System;
using Allup.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Allup.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220730220246_addNewCol")]
    partial class addNewCol
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Allup.Models.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "images/banner-1.png"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "images/banner-2.png"
                        });
                });

            modelBuilder.Entity("Allup.Models.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Allup.Models.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("Allup.Models.Bio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "+123 456 789",
                            Email = "email@yourwebsitename.com",
                            ImageUrl = "images/logo.png",
                            Location = "45 Grand Central Terminal New York,NY 1017 United State USA",
                            SupportContact = "+994553470880",
                            WorkTime = "Mon-Sat 9:00pm - 5:00pm Sun:Closed"
                        });
                });

            modelBuilder.Entity("Allup.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean eget dui rhoncus, malesuada lectus vel, rhoncus felis. Suspendisse nec tempor nunc, non maximus lacus.",
                            ImageUrl = "images/blog-1.jpg",
                            Time = new DateTime(2022, 7, 31, 2, 2, 44, 662, DateTimeKind.Local).AddTicks(30),
                            Title = "This is first blog"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean eget dui rhoncus, malesuada lectus vel, rhoncus felis. Suspendisse nec tempor nunc, non maximus lacus.",
                            ImageUrl = "images/blog-2.jpg",
                            Time = new DateTime(2022, 7, 31, 2, 2, 44, 662, DateTimeKind.Local).AddTicks(1086),
                            Title = "This is second blog"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean eget dui rhoncus, malesuada lectus vel, rhoncus felis. Suspendisse nec tempor nunc, non maximus lacus.",
                            ImageUrl = "images/blog-3.jpg",
                            Time = new DateTime(2022, 7, 31, 2, 2, 44, 662, DateTimeKind.Local).AddTicks(1181),
                            Title = "This is third blog"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean eget dui rhoncus, malesuada lectus vel, rhoncus felis. Suspendisse nec tempor nunc, non maximus lacus.",
                            ImageUrl = "images/blog-4.jpg",
                            Time = new DateTime(2022, 7, 31, 2, 2, 44, 662, DateTimeKind.Local).AddTicks(1233),
                            Title = "This is fourth blog"
                        });
                });

            modelBuilder.Entity("Allup.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UptadetAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 654, DateTimeKind.Local).AddTicks(3118),
                            ImageUrl = "images/brand/brand-1.jpg",
                            IsDeleted = false,
                            Name = "Nokia"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 659, DateTimeKind.Local).AddTicks(1434),
                            ImageUrl = "images/brand/brand-2.jpg",
                            IsDeleted = false,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 659, DateTimeKind.Local).AddTicks(1830),
                            ImageUrl = "images/brand/brand-3.jpg",
                            IsDeleted = false,
                            Name = "HTC"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 659, DateTimeKind.Local).AddTicks(1900),
                            ImageUrl = "images/brand/brand-4.jpg",
                            IsDeleted = false,
                            Name = "Xioami"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 659, DateTimeKind.Local).AddTicks(1946),
                            ImageUrl = "images/brand/brand-5.jpg",
                            IsDeleted = false,
                            Name = "Hoffmann"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 659, DateTimeKind.Local).AddTicks(2004),
                            ImageUrl = "images/brand/brand-6.jpg",
                            IsDeleted = false,
                            Name = "Delonghi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 659, DateTimeKind.Local).AddTicks(2046),
                            ImageUrl = "images/brand/brand-1.jpg",
                            IsDeleted = false,
                            Name = "Gorenji"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 659, DateTimeKind.Local).AddTicks(2087),
                            ImageUrl = "images/brand/brand-2.jpg",
                            IsDeleted = false,
                            Name = "Toshiba"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 659, DateTimeKind.Local).AddTicks(2129),
                            ImageUrl = "images/brand/brand-4.jpg",
                            IsDeleted = false,
                            Name = "HP"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 659, DateTimeKind.Local).AddTicks(2177),
                            ImageUrl = "images/brand/brand-3.jpg",
                            IsDeleted = false,
                            Name = "Dell"
                        });
                });

            modelBuilder.Entity("Allup.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UptadetAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(1230),
                            ImageUrl = "images/category-2.jpg",
                            IsDeleted = false,
                            Name = "Computer"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(2361),
                            ImageUrl = "images/category-1.jpg",
                            IsDeleted = false,
                            Name = "Laptop",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(2516),
                            ImageUrl = "images/category-3.jpg",
                            IsDeleted = false,
                            Name = "Smartphone"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(2572),
                            ImageUrl = "images/category-4.jpg",
                            IsDeleted = false,
                            Name = "Game Consoles"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(2624),
                            ImageUrl = "images/category-5.jpg",
                            IsDeleted = false,
                            Name = "Bottoms"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(2684),
                            ImageUrl = "images/category-6.jpg",
                            IsDeleted = false,
                            Name = "Tops & Sets"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(2734),
                            ImageUrl = "images/category-7.jpg",
                            IsDeleted = false,
                            Name = "Audio & Video"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(2805),
                            ImageUrl = "images/category-10.jpg",
                            IsDeleted = false,
                            Name = "Camera",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(2864),
                            ImageUrl = "images/category-9.jpg",
                            IsDeleted = false,
                            Name = "Household"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(2920),
                            ImageUrl = "images/category-8.jpg",
                            IsDeleted = false,
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(2969),
                            ImageUrl = "images/category-11.jpg",
                            IsDeleted = false,
                            Name = "Michrophone",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(3018),
                            ImageUrl = "images/category-12.jpg",
                            IsDeleted = false,
                            Name = "Video Games",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(3068),
                            ImageUrl = "images/category-1.jpg",
                            IsDeleted = false,
                            Name = "Technologics"
                        });
                });

            modelBuilder.Entity("Allup.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UptadetAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Allup.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PaymantMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UptadetAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Allup.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Allup.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BestSeller")
                        .HasColumnType("bit");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiscountPrice")
                        .HasColumnType("float");

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NewArrival")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("StockCount")
                        .HasColumnType("int");

                    b.Property<double>("TaxPercent")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UptadetAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BestSeller = false,
                            BrandId = 10,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(3870),
                            DiscountPrice = 30.0,
                            InStock = true,
                            IsDeleted = false,
                            IsFeatured = false,
                            Name = "Joystic Logitech g66",
                            NewArrival = true,
                            Price = 90.0,
                            StockCount = 23,
                            TaxPercent = 0.0
                        },
                        new
                        {
                            Id = 2,
                            BestSeller = true,
                            BrandId = 5,
                            CategoryId = 10,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(9520),
                            DiscountPrice = 30.0,
                            InStock = true,
                            IsDeleted = false,
                            IsFeatured = false,
                            Name = "Airpods Pro",
                            NewArrival = false,
                            Price = 20.0,
                            StockCount = 13,
                            TaxPercent = 0.0
                        },
                        new
                        {
                            Id = 3,
                            BestSeller = false,
                            BrandId = 4,
                            CategoryId = 10,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(9819),
                            DiscountPrice = 0.0,
                            InStock = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            Name = "HDD",
                            NewArrival = false,
                            Price = 45.0,
                            StockCount = 15,
                            TaxPercent = 0.0
                        },
                        new
                        {
                            Id = 4,
                            BestSeller = true,
                            BrandId = 2,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(9918),
                            DiscountPrice = 0.0,
                            InStock = true,
                            IsDeleted = false,
                            IsFeatured = false,
                            Name = "Printer",
                            NewArrival = true,
                            Price = 35.0,
                            StockCount = 21,
                            TaxPercent = 0.0
                        },
                        new
                        {
                            Id = 5,
                            BestSeller = false,
                            BrandId = 2,
                            CategoryId = 13,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 660, DateTimeKind.Local).AddTicks(9981),
                            DiscountPrice = 0.0,
                            InStock = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            Name = "Go Pro Max",
                            NewArrival = true,
                            Price = 410.0,
                            StockCount = 19,
                            TaxPercent = 0.0
                        },
                        new
                        {
                            Id = 6,
                            BestSeller = true,
                            BrandId = 1,
                            CategoryId = 10,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 661, DateTimeKind.Local).AddTicks(45),
                            DiscountPrice = 0.0,
                            InStock = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            Name = "Glasses",
                            NewArrival = false,
                            Price = 59.0,
                            StockCount = 8,
                            TaxPercent = 0.0
                        },
                        new
                        {
                            Id = 7,
                            BestSeller = false,
                            BrandId = 3,
                            CategoryId = 13,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 661, DateTimeKind.Local).AddTicks(103),
                            DiscountPrice = 0.0,
                            InStock = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            Name = "Insta360",
                            NewArrival = false,
                            Price = 79.0,
                            StockCount = 7,
                            TaxPercent = 0.0
                        },
                        new
                        {
                            Id = 8,
                            BestSeller = false,
                            BrandId = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 661, DateTimeKind.Local).AddTicks(156),
                            DiscountPrice = 0.0,
                            InStock = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            Name = "MiPods",
                            NewArrival = true,
                            Price = 79.0,
                            StockCount = 17,
                            TaxPercent = 0.0
                        },
                        new
                        {
                            Id = 9,
                            BestSeller = true,
                            BrandId = 7,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 661, DateTimeKind.Local).AddTicks(210),
                            DiscountPrice = 0.0,
                            InStock = true,
                            IsDeleted = false,
                            IsFeatured = false,
                            Name = "Zenbook",
                            NewArrival = false,
                            Price = 340.0,
                            StockCount = 9,
                            TaxPercent = 0.0
                        });
                });

            modelBuilder.Entity("Allup.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "images/product/product-3.jpg",
                            IsMain = true,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "images/product/product-9.jpg",
                            IsMain = false,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "images/product/product-1.jpg",
                            IsMain = true,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "images/product/product-2.jpg",
                            IsMain = false,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "images/product/product-5.jpg",
                            IsMain = true,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "images/product/product-6.jpg",
                            IsMain = false,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "images/product/product-14.jpg",
                            IsMain = true,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "images/product/product-15.jpg",
                            IsMain = false,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "images/product/product-8.jpg",
                            IsMain = true,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "images/product/product-7.jpg",
                            IsMain = false,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "images/product/product-13.jpg",
                            IsMain = true,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 12,
                            ImageUrl = "images/product/product-12.jpg",
                            IsMain = false,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 13,
                            ImageUrl = "images/product/product-10.jpg",
                            IsMain = true,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 14,
                            ImageUrl = "images/product/product-11.jpg",
                            IsMain = false,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 15,
                            ImageUrl = "images/category-3.jpg",
                            IsMain = true,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 16,
                            ImageUrl = "images/product/product-11.jpg",
                            IsMain = false,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 17,
                            ImageUrl = "images/category-1.jpg",
                            IsMain = true,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 18,
                            ImageUrl = "images/category-6.jpg",
                            IsMain = false,
                            ProductId = 9
                        });
                });

            modelBuilder.Entity("Allup.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SendText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Allup.Models.ShippingBanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShippingBanners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "Every third product",
                            ImageUrl = "images/banner-icon/icon1.png",
                            Title = "Free Delivery"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "24/7",
                            ImageUrl = "images/banner-icon/icon2.png",
                            Title = "Delivery"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "24hour delivery",
                            ImageUrl = "images/banner-icon/icon3.png",
                            Title = "GoturApar Delivery"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "Stay at home delivery",
                            ImageUrl = "images/banner-icon/icon4.png",
                            Title = "Gelme Getiririk Delivery"
                        });
                });

            modelBuilder.Entity("Allup.Models.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountSec")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "Explore and immerse in exciting 360 content with Fulldive’s all-in-one virtual reality platform",
                            DiscountSec = "Save $120 when you buy",
                            ImageUrl = "images/slider-1.jpg",
                            Title = "2020 Virtual Reality"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "Explore and immerse in exciting 360 content with Fulldive’s all-in-one virtual reality platform",
                            DiscountSec = "Save $120 when you buy",
                            ImageUrl = "images/slider-2.jpg",
                            Title = "4K HDR Smart TV 43"
                        });
                });

            modelBuilder.Entity("Allup.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Allup.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UptadetAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 662, DateTimeKind.Local).AddTicks(9527),
                            Name = "phone"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 663, DateTimeKind.Local).AddTicks(428),
                            Name = "iphone"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 663, DateTimeKind.Local).AddTicks(554),
                            Name = "samsung"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 663, DateTimeKind.Local).AddTicks(802),
                            Name = "android"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 663, DateTimeKind.Local).AddTicks(855),
                            Name = "ios"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 663, DateTimeKind.Local).AddTicks(907),
                            Name = "windowsphone"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 663, DateTimeKind.Local).AddTicks(950),
                            Name = "new"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 663, DateTimeKind.Local).AddTicks(1012),
                            Name = "used"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 663, DateTimeKind.Local).AddTicks(1059),
                            Name = "microsoft"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2022, 7, 31, 2, 2, 44, 663, DateTimeKind.Local).AddTicks(1108),
                            Name = "linux"
                        });
                });

            modelBuilder.Entity("Allup.Models.TagBlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("TagId");

                    b.ToTable("TagBlog");
                });

            modelBuilder.Entity("Allup.Models.TagProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("TagProducts");
                });

            modelBuilder.Entity("Allup.Models.Testimonial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Testimonials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorEmail = "murad@gmail.com",
                            AuthorName = "Murad",
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                            ImageUrl = "images/author-1.png"
                        },
                        new
                        {
                            Id = 2,
                            AuthorEmail = "azad@gmail.ru",
                            AuthorName = "Azad",
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                            ImageUrl = "images/author-2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            AuthorEmail = "anar@gmail.ru",
                            AuthorName = "Anar",
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                            ImageUrl = "images/author-3.jpg"
                        });
                });

            modelBuilder.Entity("Allup.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<double?>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Allup.Models.WishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Allup.Models.Basket", b =>
                {
                    b.HasOne("Allup.Models.User", "User")
                        .WithOne("basket")
                        .HasForeignKey("Allup.Models.Basket", "UserId");
                });

            modelBuilder.Entity("Allup.Models.BasketItem", b =>
                {
                    b.HasOne("Allup.Models.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Allup.Models.Category", b =>
                {
                    b.HasOne("Allup.Models.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Allup.Models.Comment", b =>
                {
                    b.HasOne("Allup.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Allup.Models.Order", b =>
                {
                    b.HasOne("Allup.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Allup.Models.OrderItem", b =>
                {
                    b.HasOne("Allup.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Allup.Models.Product", b =>
                {
                    b.HasOne("Allup.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Allup.Models.ProductImage", b =>
                {
                    b.HasOne("Allup.Models.Product", "product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Allup.Models.Review", b =>
                {
                    b.HasOne("Allup.Models.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Allup.Models.TagBlog", b =>
                {
                    b.HasOne("Allup.Models.Blog", "Blog")
                        .WithMany("TagBlogs")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.Tag", "Tag")
                        .WithMany("TagBlogs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Allup.Models.TagProduct", b =>
                {
                    b.HasOne("Allup.Models.Product", null)
                        .WithMany("TagProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Allup.Models.WishList", b =>
                {
                    b.HasOne("Allup.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Allup.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Allup.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allup.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Allup.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
